using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Media;
using System.Windows.Media.Animation;
using Microsoft.Win32;
using OGPSLauncher.Utils;

namespace OGPSLauncher
{
    public partial class MainWindow : Window
    {
        private string _gamePath = "";
        private const string GameExeName = "PixelWorlds.exe";
        private const string LauncherExeName = "OGPSLauncher.exe";
        private const string GameFolderName = "OGPSGame";

        public MainWindow()
        {
            InitializeComponent();
            LoadSavedPath();
            _ = LoadNewsAndPatchNotes();
            LoadBackgroundGif();
        }

        private void LoadBackgroundGif()
        {
            var assembly = Assembly.GetExecutingAssembly();
            using var stream = assembly.GetManifestResourceStream("OGPSLauncher.Resources.bg.gif");
            if (stream != null)
            {
                var bitmap = new BitmapImage();
                bitmap.BeginInit();
                bitmap.CacheOption = BitmapCacheOption.OnLoad;
                bitmap.StreamSource = stream;
                bitmap.EndInit();
                BackgroundImage.Source = bitmap;
            }
        }

        private async void MainButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_gamePath) && File.Exists(Path.Combine(_gamePath, GameExeName)))
            {
                StatusText.Text = "Запуск игры...";
                var startInfo = new ProcessStartInfo
                {
                    FileName = Path.Combine(_gamePath, GameExeName),
                    WorkingDirectory = _gamePath
                };
                Process.Start(startInfo);
            }
            else
            {
                await InstallGameAsync();
            }
        }

        private async Task InstallGameAsync()
        {
            using var dialog = new System.Windows.Forms.FolderBrowserDialog();
            dialog.Description = "Выберите папку для установки OGPS";
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                string baseDir = dialog.SelectedPath;
                _gamePath = Path.Combine(baseDir, GameFolderName);

                StatusText.Text = $"Установка в: {_gamePath}";
                InstallProgressBar.Visibility = Visibility.Visible;
                InstallProgressBar.IsIndeterminate = true;

                try
                {
                    Directory.CreateDirectory(_gamePath);
                    Installer.InstallGame(_gamePath);
                    Installer.CopyLauncherToGameFolder(_gamePath, LauncherExeName);
                    ShortcutCreator.CreateShortcutOnDesktop(_gamePath, LauncherExeName, "OGPS");
                    Registry.SetValue(@"HKEY_CURRENT_USER\Software\OGPSLauncher", "InstallPath", _gamePath);

                    LoadSavedPath();
                    await LoadNewsAndPatchNotes();
                    StatusText.Text = "Установка завершена!";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка: {ex.Message}", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                    StatusText.Text = "Ошибка установки";
                }
                finally
                {
                    InstallProgressBar.Visibility = Visibility.Collapsed;
                }
            }
        }

        private async Task LoadNewsAndPatchNotes()
        {
            await ShowLoadingAsync(async () =>
            {
                try
                {
                    using var client = new System.Net.Http.HttpClient();
                    string newsUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/news.txt";
                    string whatAddedUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/what_added.txt";
                    string patchUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/patchnotes.txt";
                    string screenshotUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/update_screenshot.png";

                    NewsText.Opacity = 0;
                    WhatAddedText.Opacity = 0;
                    PatchNotesText.Opacity = 0;

                    NewsText.Text = await client.GetStringAsync(newsUrl);
                    WhatAddedText.Text = await client.GetStringAsync(whatAddedUrl);
                    PatchNotesText.Text = await client.GetStringAsync(patchUrl);

                    var imageBytes = await client.GetByteArrayAsync(screenshotUrl);
                    var bitmap = new BitmapImage();
                    using (var stream = new MemoryStream(imageBytes))
                    {
                        bitmap.BeginInit();
                        bitmap.CacheOption = BitmapCacheOption.OnLoad;
                        bitmap.StreamSource = stream;
                        bitmap.EndInit();
                    }
                    UpdateScreenshot.Source = bitmap;

                    AnimateFadeIn(NewsText);
                    AnimateFadeIn(WhatAddedText);
                    AnimateFadeIn(PatchNotesText);
                    AnimateFadeIn(UpdateScreenshot);
                }
                catch
                {
                    NewsText.Text = "Не удалось загрузить новости.";
                    WhatAddedText.Text = "Не удалось загрузить изменения.";
                    PatchNotesText.Text = "Не удалось загрузить патчноуты.";
                    UpdateScreenshot.Source = new BitmapImage(new Uri("pack://application:,,,/Resources/logo.png"));
                }
            });
        }

        private void AnimateFadeIn(UIElement element)
        {
            var fadeIn = new DoubleAnimation
            {
                From = 0,
                To = 1,
                Duration = new Duration(TimeSpan.FromMilliseconds(700)),
                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }
            };
            element.BeginAnimation(UIElement.OpacityProperty, fadeIn);
        }

        private async Task ShowLoadingAsync(Func<Task> action)
        {
            LoadingOverlay.Visibility = Visibility.Visible;
            try
            {
                await action();
            }
            finally
            {
                LoadingOverlay.Visibility = Visibility.Collapsed;
            }
        }

        private void LoadSavedPath()
        {
            _gamePath = Registry.GetValue(@"HKEY_CURRENT_USER\Software\OGPSLauncher", "InstallPath", "") as string ?? "";
            bool isInstalled = !string.IsNullOrEmpty(_gamePath) && File.Exists(Path.Combine(_gamePath, GameExeName));

            MainButton.Content = isInstalled ? "▶ Play" : "Установить игру";
            MainButton.IsEnabled = true;
            MenuButton.IsEnabled = isInstalled;
            StatusText.Text = isInstalled
                ? $"Установлено: {_gamePath}"
                : "Игра не установлена";
        }

        private void MenuButton_Click(object sender, RoutedEventArgs e)
        {
            OptionsMenu.PlacementTarget = MenuButton;
            OptionsMenu.IsOpen = true;
        }

        private void OpenFolderFromMenu_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_gamePath) && Directory.Exists(_gamePath))
            {
                Process.Start("explorer.exe", _gamePath);
            }
        }

        private void UninstallFromMenu_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(_gamePath) || !Directory.Exists(_gamePath))
            {
                MessageBox.Show("Игра не установлена.", "Информация", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var result = MessageBox.Show(
                "Вы уверены, что хотите удалить игру и все настройки?\nЭто действие нельзя отменить.",
                "Подтверждение удаления",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning
            );

            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    Directory.Delete(_gamePath, true);
                    Registry.CurrentUser.DeleteSubKeyTree(@"Software\OGPSLauncher", false);
                    _gamePath = "";
                    LoadSavedPath();
                    StatusText.Text = "Игра и настройки удалены.";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка при удалении: {ex.Message}", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void DiscordButton_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(new ProcessStartInfo("https://discord.gg/your-discord-link") { UseShellExecute = true });
        }

        private void WebsiteButton_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(new ProcessStartInfo("https://your-website.com") { UseShellExecute = true });
        }

        private void GitHubButton_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(new ProcessStartInfo("https://github.com/GooseMMA/OGPS") { UseShellExecute = true });
        }
    }
}