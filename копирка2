using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;
using Microsoft.Win32;
using OGPSLauncher.Utils;

namespace OGPSLauncher
{
    public partial class MainWindow : Window
    {
        private string _gamePath = "";
        private const string GameExeName = "PixelWorlds.exe";
        private const string LauncherExeName = "OGPSLauncher.exe";
        private const string GameFolderName = "OGPSGame";

        public MainWindow()
        {
            InitializeComponent();
            LoadSavedPath();
            _ = LoadNewsAndPatchNotes();
            LoadBackgroundGif();
        }

        private void LoadBackgroundGif()
        {
            var assembly = Assembly.GetExecutingAssembly();
            using var stream = assembly.GetManifestResourceStream("OGPSLauncher.Resources.bg.gif");
            if (stream != null)
            {
                var bitmap = new BitmapImage();
                bitmap.BeginInit();
                bitmap.CacheOption = BitmapCacheOption.OnLoad;
                bitmap.StreamSource = stream;
                bitmap.EndInit();
                BackgroundImage.Source = bitmap;
            }
        }

        private async void MainButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_gamePath) && File.Exists(Path.Combine(_gamePath, GameExeName)))
            {
                StatusText.Text = "Launching game...";
                Process.Start(new ProcessStartInfo
                {
                    FileName = Path.Combine(_gamePath, GameExeName),
                    WorkingDirectory = _gamePath
                });
            }
            else
            {
                await InstallGameAsync();
            }
        }

        private async Task InstallGameAsync()
        {
            using var dialog = new System.Windows.Forms.FolderBrowserDialog
            {
                Description = "Choose folder to install OGPS"
            };
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                string baseDir = dialog.SelectedPath;
                _gamePath = Path.Combine(baseDir, GameFolderName);

                StatusText.Text = $"Installing to: {_gamePath}";
                InstallProgressBar.Visibility = Visibility.Visible;
                InstallProgressBar.IsIndeterminate = true;

                try
                {
                    Directory.CreateDirectory(_gamePath);
                    Installer.InstallGame(_gamePath);
                    Installer.CopyLauncherToGameFolder(_gamePath, LauncherExeName);
                    ShortcutCreator.CreateShortcutOnDesktop(_gamePath, LauncherExeName, "OGPS");
                    Registry.SetValue(@"HKEY_CURRENT_USER\Software\OGPSLauncher", "InstallPath", _gamePath);

                    LoadSavedPath();
                    await LoadNewsAndPatchNotes();
                    StatusText.Text = "Installation complete!";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    StatusText.Text = "Installation failed";
                }
                finally
                {
                    InstallProgressBar.Visibility = Visibility.Collapsed;
                }
            }
        }

        private async Task LoadNewsAndPatchNotes()
        {
            await ShowLoadingAsync(async () =>
            {
                try
                {
                    using var client = new System.Net.Http.HttpClient();
                    string newsUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/news.txt";
                    string whatAddedUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/what_added.txt";
                    string patchUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/patchnotes.txt";
                    string screenshotUrl = "https://raw.githubusercontent.com/GooseMMA/OGPS/main/update_screenshot.png";

                    NewsText.Text = await client.GetStringAsync(newsUrl);
                    WhatAddedText.Text = await client.GetStringAsync(whatAddedUrl);
                    PatchNotesText.Text = await client.GetStringAsync(patchUrl);

                    var imageBytes = await client.GetByteArrayAsync(screenshotUrl);
                    var bitmap = new BitmapImage();
                    using (var stream = new MemoryStream(imageBytes))
                    {
                        bitmap.BeginInit();
                        bitmap.CacheOption = BitmapCacheOption.OnLoad;
                        bitmap.StreamSource = stream;
                        bitmap.EndInit();
                    }
                    UpdateScreenshot.Source = bitmap;
                }
                catch
                {
                    NewsText.Text = "Failed to load news.";
                    WhatAddedText.Text = "Failed to load updates.";
                    PatchNotesText.Text = "Failed to load patch notes.";
                }
            });
        }

        private async Task ShowLoadingAsync(Func<Task> action)
        {
            LoadingOverlay.Visibility = Visibility.Visible;
            try { await action(); }
            finally { LoadingOverlay.Visibility = Visibility.Collapsed; }
        }

        private void LoadSavedPath()
        {
            _gamePath = Registry.GetValue(@"HKEY_CURRENT_USER\Software\OGPSLauncher", "InstallPath", "") as string ?? "";
            bool isInstalled = !string.IsNullOrEmpty(_gamePath) && File.Exists(Path.Combine(_gamePath, GameExeName));

            MainButton.Content = isInstalled ? "â–¶ Play" : "Install Game";
            MainButton.IsEnabled = true;
            MenuButton.IsEnabled = isInstalled;
            StatusText.Text = isInstalled ? $"Installed: {_gamePath}" : "Game not installed";
        }

        private void MenuButton_Click(object sender, RoutedEventArgs e)
        {
            MenuButton.ContextMenu.IsOpen = true;
        }

        private void OpenFolderFromMenu_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_gamePath) && Directory.Exists(_gamePath))
                Process.Start("explorer.exe", _gamePath);
        }

        private void UninstallFromMenu_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(_gamePath) || !Directory.Exists(_gamePath))
            {
                MessageBox.Show("Game is not installed.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var result = MessageBox.Show("Are you sure you want to uninstall the game and all settings?",
                "Uninstall Confirmation", MessageBoxButton.YesNo, MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    Directory.Delete(_gamePath, true);
                    Registry.CurrentUser.DeleteSubKeyTree(@"Software\\OGPSLauncher", false);
                    _gamePath = "";
                    LoadSavedPath();
                    StatusText.Text = "Game and settings removed.";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error deleting: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void DiscordButton_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(new ProcessStartInfo("https://discord.gg/your-discord-link") { UseShellExecute = true });
        }

        private void WebsiteButton_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(new ProcessStartInfo("https://your-website.com") { UseShellExecute = true });
        }

        private void GitHubButton_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(new ProcessStartInfo("https://github.com/GooseMMA/OGPS") { UseShellExecute = true });
        }
    }
}