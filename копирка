import tkinter as tk
from tkinter import filedialog, simpledialog
from PIL import Image, ImageTk
import json
import os

class SpriteEditor(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Launcher Sprite Editor")
        self.configure(bg="#2b2b2b")

        self.grid_size = 50
        self.canvas = tk.Canvas(self, bg="#1f1f1f", highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)

        self.sprites = []  # {id, path, x, y, width, height, pil, img, is_bg}
        self.selected = None
        self.drag_data = {"x":0, "y":0}
        self.selection_rect = None
        self.background_id = None

        print("""
üéÆ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
W/A/S/D - –¥–≤–∏–≥–∞—Ç—å
Q/E - –ø–æ–¥–Ω—è—Ç—å/–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–π
R/F - —É–≤–µ–ª–∏—á–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä
C - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
Z/X - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É
Delete - —É–¥–∞–ª–∏—Ç—å
Drag –º—ã—à—å—é - –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
""")

        # —Å–æ–±—ã—Ç–∏—è
        self.canvas.bind("<Configure>", self.draw_grid)
        self.canvas.bind("<Button-1>", self.on_click)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)

        # –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.bind("w", lambda e: self.move_selected(0,-5))
        self.bind("s", lambda e: self.move_selected(0,5))
        self.bind("a", lambda e: self.move_selected(-5,0))
        self.bind("d", lambda e: self.move_selected(5,0))
        self.bind("q", lambda e: self.raise_sprite())
        self.bind("e", lambda e: self.lower_sprite())
        self.bind("r", lambda e: self.resize_selected(1.1))
        self.bind("f", lambda e: self.resize_selected(0.9))
        self.bind("c", lambda e: self.align_to_center())
        self.bind("z", lambda e: self.save_scene())
        self.bind("x", lambda e: self.load_scene())
        self.bind("<Delete>", lambda e: self.delete_sprite())

        # –º–µ–Ω—é
        menu = tk.Menu(self)
        file_menu = tk.Menu(menu, tearoff=0)
        file_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=self.add_sprite)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω—É", command=self.save_scene)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É", command=self.load_scene)
        menu.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        self.config(menu=menu)

    # ==================== –°–µ—Ç–∫–∞ ====================
    def draw_grid(self, event=None):
        self.canvas.delete("grid")
        w,h = self.canvas.winfo_width(), self.canvas.winfo_height()
        for x in range(0,w,self.grid_size):
            self.canvas.create_line(x,0,x,h,fill="#333333",tags="grid")
        for y in range(0,h,self.grid_size):
            self.canvas.create_line(0,y,w,y,fill="#333333",tags="grid")
        # —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        self.canvas.create_line(w//2,0,w//2,h,fill="#007acc",dash=(4,2),tags="grid")
        self.canvas.create_line(0,h//2,w,h//2,fill="#007acc",dash=(4,2),tags="grid")

    # ==================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞ ====================
    def add_sprite(self):
        path = filedialog.askopenfilename(filetypes=[("Image files","*.png;*.jpg;*.jpeg;*.gif")])
        if not path:
            return
        pil_img = Image.open(path)

        # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–ø—Ä–∞–π—Ç ‚Äî —Ñ–æ–Ω
        if not self.sprites:
            # —Å–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            w = simpledialog.askinteger("–§–æ–Ω —à–∏—Ä–∏–Ω–∞","–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ñ–æ–Ω–∞:",initialvalue=pil_img.width)
            h = simpledialog.askinteger("–§–æ–Ω –≤—ã—Å–æ—Ç–∞","–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Ñ–æ–Ω–∞:",initialvalue=pil_img.height)
            pil_img = pil_img.resize((w,h),Image.Resampling.LANCZOS)
            tk_img = ImageTk.PhotoImage(pil_img)
            sprite_id = self.canvas.create_image(0,0,image=tk_img,anchor="nw")
            self.canvas.config(width=w,height=h)
            self.geometry(f"{w}x{h}")
            self.background_id = sprite_id
            self.sprites.append({
                "id": sprite_id,
                "path": path,
                "x": 0,
                "y": 0,
                "width": w,
                "height": h,
                "pil": pil_img,
                "img": tk_img,
                "is_bg": True
            })
            print(f"‚úÖ –§–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–∞–∑–º–µ—Ä–æ–º {w}x{h}")
        else:
            # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            tk_img = ImageTk.PhotoImage(pil_img)
            sprite_id = self.canvas.create_image(100,100,image=tk_img,anchor="nw")
            self.sprites.append({
                "id": sprite_id,
                "path": path,
                "x": 100,
                "y": 100,
                "width": pil_img.width,
                "height": pil_img.height,
                "pil": pil_img,
                "img": tk_img,
                "is_bg": False
            })
            self.select_sprite_by_id(sprite_id)

    # ==================== –í—ã–¥–µ–ª–µ–Ω–∏–µ ====================
    def select_sprite_by_id(self,sprite_id):
        if sprite_id==self.background_id:
            return
        self.selected = sprite_id
        self.canvas.tag_raise(sprite_id)
        self.update_selection_rect()

    def on_click(self,event):
        items = self.canvas.find_overlapping(event.x,event.y,event.x,event.y)
        if not items:
            self.clear_selection()
            return
        top = items[-1]
        if top==self.background_id:
            return
        self.selected=top
        self.canvas.tag_raise(top)
        self.update_selection_rect()
        self.drag_data["x"]=event.x
        self.drag_data["y"]=event.y

    def on_drag(self,event):
        if self.selected:
            dx = event.x - self.drag_data["x"]
            dy = event.y - self.drag_data["y"]
            self.canvas.move(self.selected,dx,dy)
            for s in self.sprites:
                if s["id"]==self.selected:
                    s["x"]+=dx
                    s["y"]+=dy
                    break
            self.drag_data["x"],self.drag_data["y"]=event.x,event.y
            self.update_selection_rect()

    def on_release(self,event):
        self.drag_data={"x":0,"y":0}

    # ==================== –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ ====================
    def move_selected(self,dx,dy):
        if self.selected:
            self.canvas.move(self.selected,dx,dy)
            for s in self.sprites:
                if s["id"]==self.selected:
                    s["x"]+=dx
                    s["y"]+=dy
            self.update_selection_rect()

    def resize_selected(self,scale):
        if not self.selected:
            return
        for s in self.sprites:
            if s["id"]==self.selected and not s["is_bg"]:
                w,h = s["pil"].size
                nw,nh = int(w*scale), int(h*scale)
                s["pil"] = s["pil"].resize((nw,nh),Image.Resampling.LANCZOS)
                s["img"]=ImageTk.PhotoImage(s["pil"])
                s["width"],s["height"]=nw,nh
                self.canvas.itemconfig(s["id"],image=s["img"])
                self.update_selection_rect()
                break

    def raise_sprite(self):
        if self.selected:
            self.canvas.tag_raise(self.selected)
            self.reorder_sprites()

    def lower_sprite(self):
        if self.selected:
            self.canvas.tag_lower(self.selected)
            self.reorder_sprites()

    def delete_sprite(self):
        if self.selected:
            self.canvas.delete(self.selected)
            self.sprites=[s for s in self.sprites if s["id"]!=self.selected]
            self.clear_selection()

    def reorder_sprites(self):
        ordered = self.canvas.find_all()
        id_to_index={sprite_id:i for i,sprite_id in enumerate(ordered)}
        self.sprites.sort(key=lambda s:id_to_index[s["id"]])

    def update_selection_rect(self):
        if not self.selected:
            return
        bbox=self.canvas.bbox(self.selected)
        if not bbox:
            return
        x1,y1,x2,y2=bbox
        if self.selection_rect:
            self.canvas.coords(self.selection_rect,x1-2,y1-2,x2+2,y2+2)
        else:
            self.selection_rect = self.canvas.create_rectangle(
                x1-2,y1-2,x2+2,y2+2,outline="#00bfff",width=2,dash=(4,2)
            )
            self.canvas.tag_lower(self.selection_rect,self.selected)

    def clear_selection(self):
        if self.selection_rect:
            self.canvas.delete(self.selection_rect)
            self.selection_rect=None
        self.selected=None

    def align_to_center(self):
        if not self.selected:
            return
        w,h = self.canvas.winfo_width(), self.canvas.winfo_height()
        for s in self.sprites:
            if s["id"]==self.selected:
                nx = (w - s["width"])//2
                ny = (h - s["height"])//2
                dx,dy = nx - s["x"], ny - s["y"]
                self.canvas.move(self.selected,dx,dy)
                s["x"],s["y"]=nx,ny
                break
        self.update_selection_rect()

    # ==================== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –ó–∞–≥—Ä—É–∑–∫–∞ ====================
    def save_scene(self):
        data=[]
        for s in self.sprites:
            data.append({
                "path":os.path.basename(s["path"]),
                "x":s["x"],
                "y":s["y"],
                "width":s["width"],
                "height":s["height"],
                "is_bg":s["is_bg"]
            })
        with open("scene.json","w",encoding="utf-8") as f:
            json.dump(data,f,indent=4,ensure_ascii=False)
        print("‚úÖ –°—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ scene.json")

    def load_scene(self):
        path=filedialog.askopenfilename(filetypes=[("JSON files","*.json")])
        if not path: return
        with open(path,"r",encoding="utf-8") as f:
            data=json.load(f)
        self.canvas.delete("all")
        self.sprites.clear()
        self.selection_rect=None
        self.background_id=None
        self.draw_grid()
        for i,item in enumerate(data):
            if not os.path.exists(item["path"]):
                continue
            pil_img = Image.open(item["path"]).resize((item["width"],item["height"]),Image.Resampling.LANCZOS)
            tk_img = ImageTk.PhotoImage(pil_img)
            sprite_id = self.canvas.create_image(item["x"],item["y"],image=tk_img,anchor="nw")
            self.sprites.append({
                "id":sprite_id,
                "path":item["path"],
                "x":item["x"],
                "y":item["y"],
                "width":item["width"],
                "height":item["height"],
                "pil":pil_img,
                "img":tk_img,
                "is_bg":item["is_bg"]
            })
            if i==0:
                self.background_id=sprite_id
        print("‚úÖ –°—Ü–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

if __name__=="__main__":
    SpriteEditor().mainloop()